//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inspinia_MVC5
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InfraccionesDBEntities : DbContext
    {
        public InfraccionesDBEntities()
            : base("name=InfraccionesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<Comandancia> Comandancia { get; set; }
        public virtual DbSet<Evento> Evento { get; set; }
        public virtual DbSet<Evento_Caso> Evento_Caso { get; set; }
        public virtual DbSet<Regional> Regional { get; set; }
        public virtual DbSet<Tipo_Involucrado> Tipo_Involucrado { get; set; }
        public virtual DbSet<Zona> Zona { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<Municipio> Municipio { get; set; }
        public virtual DbSet<Condicion_implicado> Condicion_implicado { get; set; }
        public virtual DbSet<Implicado> Implicado { get; set; }
        public virtual DbSet<Nacionalidad> Nacionalidad { get; set; }
        public virtual DbSet<Profesion> Profesion { get; set; }
        public virtual DbSet<Rango> Rango { get; set; }
        public virtual DbSet<Registro_Evento> Registro_Evento { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
    
        public virtual int Usp_Insert_Implicado(Nullable<int> registro_Evento_id, Nullable<int> profesion_id, Nullable<int> rango_id, Nullable<int> condicion_implicado_id, Nullable<int> nacionalidad, string nombres, string apellidos, string sexo, Nullable<int> edad)
        {
            var registro_Evento_idParameter = registro_Evento_id.HasValue ?
                new ObjectParameter("Registro_Evento_id", registro_Evento_id) :
                new ObjectParameter("Registro_Evento_id", typeof(int));
    
            var profesion_idParameter = profesion_id.HasValue ?
                new ObjectParameter("Profesion_id", profesion_id) :
                new ObjectParameter("Profesion_id", typeof(int));
    
            var rango_idParameter = rango_id.HasValue ?
                new ObjectParameter("Rango_id", rango_id) :
                new ObjectParameter("Rango_id", typeof(int));
    
            var condicion_implicado_idParameter = condicion_implicado_id.HasValue ?
                new ObjectParameter("Condicion_implicado_id", condicion_implicado_id) :
                new ObjectParameter("Condicion_implicado_id", typeof(int));
    
            var nacionalidadParameter = nacionalidad.HasValue ?
                new ObjectParameter("Nacionalidad", nacionalidad) :
                new ObjectParameter("Nacionalidad", typeof(int));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidosParameter = apellidos != null ?
                new ObjectParameter("Apellidos", apellidos) :
                new ObjectParameter("Apellidos", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var edadParameter = edad.HasValue ?
                new ObjectParameter("Edad", edad) :
                new ObjectParameter("Edad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Usp_Insert_Implicado", registro_Evento_idParameter, profesion_idParameter, rango_idParameter, condicion_implicado_idParameter, nacionalidadParameter, nombresParameter, apellidosParameter, sexoParameter, edadParameter);
        }
    
        public virtual ObjectResult<string> Usp_Registra_Evento(Nullable<int> regionalId, Nullable<int> comandanciaId, Nullable<int> zonaId, Nullable<int> municipioId, Nullable<int> usuarioId, Nullable<int> tipo_InvolucradoId, Nullable<decimal> geogCol1, Nullable<decimal> geogCol2, Nullable<System.DateTime> fechaReporte, string direccion, Nullable<bool> fiscalizado, Nullable<bool> retenido, string comentario)
        {
            var regionalIdParameter = regionalId.HasValue ?
                new ObjectParameter("RegionalId", regionalId) :
                new ObjectParameter("RegionalId", typeof(int));
    
            var comandanciaIdParameter = comandanciaId.HasValue ?
                new ObjectParameter("ComandanciaId", comandanciaId) :
                new ObjectParameter("ComandanciaId", typeof(int));
    
            var zonaIdParameter = zonaId.HasValue ?
                new ObjectParameter("ZonaId", zonaId) :
                new ObjectParameter("ZonaId", typeof(int));
    
            var municipioIdParameter = municipioId.HasValue ?
                new ObjectParameter("MunicipioId", municipioId) :
                new ObjectParameter("MunicipioId", typeof(int));
    
            var usuarioIdParameter = usuarioId.HasValue ?
                new ObjectParameter("UsuarioId", usuarioId) :
                new ObjectParameter("UsuarioId", typeof(int));
    
            var tipo_InvolucradoIdParameter = tipo_InvolucradoId.HasValue ?
                new ObjectParameter("Tipo_InvolucradoId", tipo_InvolucradoId) :
                new ObjectParameter("Tipo_InvolucradoId", typeof(int));
    
            var geogCol1Parameter = geogCol1.HasValue ?
                new ObjectParameter("GeogCol1", geogCol1) :
                new ObjectParameter("GeogCol1", typeof(decimal));
    
            var geogCol2Parameter = geogCol2.HasValue ?
                new ObjectParameter("GeogCol2", geogCol2) :
                new ObjectParameter("GeogCol2", typeof(decimal));
    
            var fechaReporteParameter = fechaReporte.HasValue ?
                new ObjectParameter("FechaReporte", fechaReporte) :
                new ObjectParameter("FechaReporte", typeof(System.DateTime));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var fiscalizadoParameter = fiscalizado.HasValue ?
                new ObjectParameter("Fiscalizado", fiscalizado) :
                new ObjectParameter("Fiscalizado", typeof(bool));
    
            var retenidoParameter = retenido.HasValue ?
                new ObjectParameter("Retenido", retenido) :
                new ObjectParameter("Retenido", typeof(bool));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Usp_Registra_Evento", regionalIdParameter, comandanciaIdParameter, zonaIdParameter, municipioIdParameter, usuarioIdParameter, tipo_InvolucradoIdParameter, geogCol1Parameter, geogCol2Parameter, fechaReporteParameter, direccionParameter, fiscalizadoParameter, retenidoParameter, comentarioParameter);
        }
    }
}
